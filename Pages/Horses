import React, { useState, useEffect } from "react";
import { Horse } from "@/entities/Horse";
import { User } from "@/entities/User";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { 
  Search, 
  Filter, 
  Plus, 
  Heart, 
  Eye,
  DollarSign,
  Calendar,
  Award
} from "lucide-react";

export default function Horses() {
  const [horses, setHorses] = useState([]);
  const [user, setUser] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [statusFilter, setStatusFilter] = useState("all");
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    loadHorses();
  }, []);

  const loadHorses = async () => {
    try {
      const currentUser = await User.me();
      setUser(currentUser);

      let userHorses = [];
      
      switch (currentUser.role) {
        case 'Owner':
          userHorses = await Horse.filter({ owner_id: currentUser.id });
          break;
        case 'Rider':
          userHorses = await Horse.filter({ rider_id: currentUser.id });
          break;
        case 'BarnManager':
          userHorses = await Horse.filter({ barn_manager_id: currentUser.id });
          break;
        case 'Vet':
          userHorses = await Horse.filter({ vet_id: currentUser.id });
          break;
        case 'Buyer':
          userHorses = await Horse.filter({ for_sale: true });
          break;
        default:
          userHorses = await Horse.list();
      }
      
      setHorses(userHorses);
    } catch (error) {
      console.error("Error loading horses:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const filteredHorses = horses.filter(horse => {
    const matchesSearch = horse.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         horse.breed.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus = statusFilter === "all" || horse.status === statusFilter;
    return matchesSearch && matchesStatus;
  });

  const getStatusColor = (status) => {
    const colors = {
      'Active': 'bg-green-100 text-green-800',
      'In Training': 'bg-blue-100 text-blue-800',
      'For Sale': 'bg-yellow-100 text-yellow-800',
      'Injured': 'bg-red-100 text-red-800',
      'Retired': 'bg-gray-100 text-gray-800'
    };
    return colors[status] || 'bg-gray-100 text-gray-800';
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-amber-600"></div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-amber-50 via-orange-50 to-yellow-50 p-4 md:p-8">
      <div className="max-w-7xl mx-auto">
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-8 gap-4">
          <div>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">
              {user?.role === 'Buyer' ? 'Available Horses' : 'Horse Management'}
            </h1>
            <p className="text-amber-700">
              {user?.role === 'Buyer' 
                ? 'Browse horses currently for sale' 
                : 'Manage and track your horses'}
            </p>
          </div>
          
          {user?.role !== 'Buyer' && user?.role !== 'Vet' && (
            <Link to={createPageUrl("AddHorse")}>
              <Button className="bg-gradient-to-r from-amber-600 to-orange-600 hover:from-amber-700 hover:to-orange-700">
                <Plus className="w-4 h-4 mr-2" />
                Add Horse
              </Button>
            </Link>
          )}
        </div>

        {/* Search and Filters */}
        <Card className="bg-white/70 backdrop-blur-sm border-amber-200 mb-6">
          <CardContent className="p-6">
            <div className="flex flex-col md:flex-row gap-4">
              <div className="flex-1 relative">
                <Search className="absolute left-3 top-3 w-4 h-4 text-amber-600" />
                <Input
                  placeholder="Search horses by name or breed..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10 border-amber-200 focus:border-amber-400"
                />
              </div>
              
              <div className="flex items-center gap-2">
                <Filter className="w-4 h-4 text-amber-600" />
                <select
                  value={statusFilter}
                  onChange={(e) => setStatusFilter(e.target.value)}
                  className="px-3 py-2 border border-amber-200 rounded-lg bg-white focus:border-amber-400 focus:outline-none"
                >
                  <option value="all">All Status</option>
                  <option value="Active">Active</option>
                  <option value="In Training">In Training</option>
                  <option value="For Sale">For Sale</option>
                  <option value="Injured">Injured</option>
                  <option value="Retired">Retired</option>
                </select>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Horses Grid */}
        {filteredHorses.length === 0 ? (
          <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
            <CardContent className="text-center py-12">
              <Heart className="w-16 h-16 text-amber-400 mx-auto mb-4" />
              <h3 className="text-xl font-semibold text-gray-900 mb-2">
                {searchTerm || statusFilter !== "all" 
                  ? 'No horses match your criteria' 
                  : (user?.role === 'Buyer' ? 'No horses for sale' : 'No horses found')}
              </h3>
              <p className="text-amber-700 mb-6">
                {searchTerm || statusFilter !== "all" 
                  ? 'Try adjusting your search or filters' 
                  : (user?.role === 'Buyer' 
                    ? 'Check back later for available horses'
                    : 'Start by adding your first horse')}
              </p>
            </CardContent>
          </Card>
        ) : (
          <div className="grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {filteredHorses.map((horse) => (
              <Card key={horse.id} className="bg-white/70 backdrop-blur-sm border-amber-200 hover:shadow-lg transition-all duration-300 group">
                <CardHeader className="pb-3">
                  <div className="aspect-square bg-gradient-to-br from-amber-100 to-orange-100 rounded-lg mb-3 flex items-center justify-center overflow-hidden">
                    {horse.photo_url ? (
                      <img 
                        src={horse.photo_url} 
                        alt={horse.name}
                        className="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                      />
                    ) : (
                      <Heart className="w-12 h-12 text-amber-500" />
                    )}
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-lg font-bold text-gray-900">
                      {horse.name}
                    </CardTitle>
                    <Badge className={getStatusColor(horse.status)}>
                      {horse.status}
                    </Badge>
                  </div>
                </CardHeader>
                
                <CardContent className="space-y-3">
                  <div className="space-y-2 text-sm">
                    <p className="text-amber-700 font-medium">
                      {horse.breed} â€¢ {horse.age} years
                    </p>
                    
                    {horse.discipline && (
                      <div className="flex items-center gap-1">
                        <Award className="w-3 h-3 text-amber-600" />
                        <span className="text-gray-600">{horse.discipline}</span>
                      </div>
                    )}
                    
                    {horse.height && (
                      <p className="text-gray-600">Height: {horse.height}</p>
                    )}
                    
                    {horse.for_sale && horse.sale_price && (
                      <div className="flex items-center gap-1 text-green-600 font-medium">
                        <DollarSign className="w-3 h-3" />
                        <span>${horse.sale_price.toLocaleString()}</span>
                      </div>
                    )}
                  </div>
                  
                  <Link to={createPageUrl(`HorseDetails?id=${horse.id}`)}>
                    <Button 
                      className="w-full mt-4 bg-gradient-to-r from-amber-600 to-orange-600 hover:from-amber-700 hover:to-orange-700"
                    >
                      <Eye className="w-4 h-4 mr-2" />
                      View Details
                    </Button>
                  </Link>
                </CardContent>
              </Card>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}
