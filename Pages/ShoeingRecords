import React, { useState, useEffect } from "react";
import { ShoeingRecord } from "@/entities/ShoeingRecord";
import { Horse } from "@/entities/Horse";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Plus, Hammer } from "lucide-react";
import { format, isFuture, parseISO } from "date-fns";

export default function ShoeingRecords() {
  const [records, setRecords] = useState([]);
  const [horses, setHorses] = useState([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const loadData = async () => {
      try {
        const [allRecords, allHorses] = await Promise.all([
          ShoeingRecord.list('-shoeing_date'),
          Horse.list()
        ]);
        setRecords(allRecords);
        setHorses(allHorses);
      } catch (error) {
        console.error("Error loading data:", error);
      } finally {
        setIsLoading(false);
      }
    };
    loadData();
  }, []);

  const getHorseName = (horseId) => horses.find(h => h.id === horseId)?.name || 'Unknown Horse';

  const upcomingDueDates = records.filter(r => r.next_due_date && isFuture(parseISO(r.next_due_date)));
  const totalCost = records.reduce((sum, r) => sum + (r.cost || 0), 0);

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-amber-600"></div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-amber-50 via-orange-50 to-yellow-50 p-4 md:p-8">
      <div className="max-w-7xl mx-auto">
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-8 gap-4">
          <div>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">Shoeing Records</h1>
            <p className="text-amber-700">Manage all farrier visits and shoeing history.</p>
          </div>
          <Link to={createPageUrl("AddShoeingRecord")}>
            <Button className="bg-gradient-to-r from-amber-600 to-orange-600 hover:from-amber-700 hover:to-orange-700">
              <Plus className="w-4 h-4 mr-2" /> Add Shoeing Record
            </Button>
          </Link>
        </div>

        {/* Stats Cards */}
        <div className="grid md:grid-cols-3 gap-6 mb-8">
          <Card><CardHeader><CardTitle>Total Visits</CardTitle></CardHeader><CardContent><p className="text-3xl font-bold">{records.length}</p></CardContent></Card>
          <Card><CardHeader><CardTitle>Next Shoeing Due</CardTitle></CardHeader><CardContent><p className="text-3xl font-bold">{upcomingDueDates.length}</p></CardContent></Card>
          <Card><CardHeader><CardTitle>Total Billed</CardTitle></CardHeader><CardContent><p className="text-3xl font-bold">${totalCost.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</p></CardContent></Card>
        </div>

        {records.length === 0 ? (
          <Card className="bg-white/70 backdrop-blur-sm border-amber-200"><CardContent className="text-center py-12">
            <Hammer className="w-16 h-16 text-amber-400 mx-auto mb-4" />
            <h3 className="text-xl font-semibold text-gray-900 mb-2">No Shoeing Records Found</h3>
            <p className="text-amber-700 mb-6">Start by logging the first farrier visit.</p>
            <Link to={createPageUrl("AddShoeingRecord")}><Button className="bg-gradient-to-r from-amber-600 to-orange-600 hover:from-amber-700 hover:to-orange-700">Record First Visit</Button></Link>
          </CardContent></Card>
        ) : (
          <div className="space-y-4">
            {records.map(record => (
              <Card key={record.id} className="bg-white/70 backdrop-blur-sm border-amber-200">
                <CardContent className="p-4 flex items-center justify-between">
                  <div className="flex items-center gap-4">
                    <div className="flex-shrink-0 w-12 h-12 rounded-lg bg-amber-100 flex items-center justify-center"><Hammer className="w-6 h-6 text-amber-600"/></div>
                    <div>
                      <p className="font-bold text-lg text-gray-900">{getHorseName(record.horse_id)}</p>
                      <p className="text-sm text-gray-600">{record.type} by {record.farrier_name}</p>
                    </div>
                  </div>
                  <div className="text-right">
                    <p className="font-semibold text-gray-800">{format(parseISO(record.shoeing_date), "MMM d, yyyy")}</p>
                    {record.next_due_date && <Badge className="mt-1">Next: {format(parseISO(record.next_due_date), "MMM d")}</Badge>}
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}
