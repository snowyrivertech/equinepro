
import React, { useState, useEffect } from "react";
import { Horse } from "@/entities/Horse";
import { TrainingLog } from "@/entities/TrainingLog";
import { FeedingSchedule } from "@/entities/FeedingSchedule";
import { VetVisit } from "@/entities/VetVisit";
import { ShoeingRecord } from "@/entities/ShoeingRecord";
import { User } from "@/entities/User";
import { Link, useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  ArrowLeft, 
  Heart, 
  Edit, 
  Calendar,
  FileText,
  Utensils,
  Stethoscope,
  Plus,
  Star,
  Award,
  DollarSign,
  Hammer,
  Trash2, // New icon
  Archive // New icon
} from "lucide-react";
import { format } from "date-fns";

export default function HorseDetails() {
  const navigate = useNavigate();
  const [horse, setHorse] = useState(null);
  const [trainingLogs, setTrainingLogs] = useState([]);
  const [feedingSchedules, setFeedingSchedules] = useState([]);
  const [vetVisits, setVetVisits] = useState([]);
  const [shoeingRecords, setShoeingRecords] = useState([]);
  const [user, setUser] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  const urlParams = new URLSearchParams(window.location.search);
  const horseId = urlParams.get('id');

  useEffect(() => {
    if (!horseId) return;

    const loadHorseDetails = async () => {
      try {
        const currentUser = await User.me();
        setUser(currentUser);

        // Load horse details
        const horses = await Horse.list();
        const foundHorse = horses.find(h => h.id === horseId);
        
        if (!foundHorse) {
          navigate(createPageUrl("Horses"));
          return;
        }
        
        setHorse(foundHorse);

        // Load related data
        const [logs, feeding, visits, shoeing] = await Promise.all([
          TrainingLog.filter({ horse_id: horseId }, '-created_date'),
          FeedingSchedule.filter({ horse_id: horseId }),
          VetVisit.filter({ horse_id: horseId }, '-visit_date'),
          ShoeingRecord.filter({ horse_id: horseId }, '-shoeing_date')
        ]);

        setTrainingLogs(logs);
        setFeedingSchedules(feeding);
        setVetVisits(visits);
        setShoeingRecords(shoeing);
      } catch (error) {
        console.error("Error loading horse details:", error);
      } finally {
        setIsLoading(false);
      }
    };

    loadHorseDetails();
  }, [horseId, navigate]);

  const handleArchiveHorse = async () => {
    if (window.confirm(`Are you sure you want to archive ${horse.name}? This will change their status to 'Retired'.`)) {
      try {
        await Horse.update(horse.id, { status: 'Retired' });
        setHorse(prev => ({ ...prev, status: 'Retired' }));
        alert(`${horse.name} has been archived successfully.`);
      } catch (error) {
        console.error("Error archiving horse:", error);
        alert("Error archiving horse. Please try again.");
      }
    }
  };

  const handleDeleteHorse = async () => {
    if (window.confirm(`Are you sure you want to permanently delete ${horse.name}? This action cannot be undone and will also delete all associated records.`)) {
      try {
        await Horse.delete(horse.id);
        navigate(createPageUrl("Horses"));
      } catch (error) {
        console.error("Error deleting horse:", error);
        alert("Error deleting horse. Please try again.");
      }
    }
  };

  const getStatusColor = (status) => {
    const colors = {
      'Active': 'bg-green-100 text-green-800',
      'In Training': 'bg-blue-100 text-blue-800',
      'For Sale': 'bg-yellow-100 text-yellow-800',
      'Injured': 'bg-red-100 text-red-800',
      'Retired': 'bg-gray-100 text-gray-800'
    };
    return colors[status] || 'bg-gray-100 text-gray-800';
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-amber-600"></div>
      </div>
    );
  }

  if (!horse) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-amber-50 via-orange-50 to-yellow-50 p-8">
        <div className="max-w-4xl mx-auto text-center">
          <Heart className="w-16 h-16 text-amber-400 mx-auto mb-4" />
          <h2 className="text-2xl font-bold text-gray-900 mb-4">Horse Not Found</h2>
          <Button onClick={() => navigate(createPageUrl("Horses"))}>
            <ArrowLeft className="w-4 h-4 mr-2" />
            Back to Horses
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-amber-50 via-orange-50 to-yellow-50 p-4 md:p-8">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="flex items-center gap-4 mb-6">
          <Button
            variant="outline"
            onClick={() => navigate(createPageUrl("Horses"))}
            className="border-amber-300 text-amber-700 hover:bg-amber-50"
          >
            <ArrowLeft className="w-4 h-4 mr-2" />
            Back
          </Button>
          <div className="flex-1">
            <div className="flex items-center gap-4 mb-2">
              <h1 className="text-3xl font-bold text-gray-900">{horse.name}</h1>
              <Badge className={getStatusColor(horse.status)}>
                {horse.status}
              </Badge>
            </div>
            <p className="text-amber-700">
              {horse.breed} • {horse.age} years old • {horse.gender}
            </p>
          </div>
          {user?.role !== 'Buyer' && (
            <div className="flex gap-2">
              <Button 
                className="bg-gradient-to-r from-amber-600 to-orange-600 hover:from-amber-700 hover:to-orange-700"
                onClick={() => navigate(createPageUrl(`EditHorse?id=${horse.id}`))}
              >
                <Edit className="w-4 h-4 mr-2" />
                Edit
              </Button>
              <Button 
                variant="outline"
                onClick={handleArchiveHorse}
                className="border-gray-300 text-gray-700 hover:bg-gray-50"
              >
                <Archive className="w-4 h-4 mr-2" />
                Archive
              </Button>
              <Button 
                variant="outline"
                onClick={handleDeleteHorse}
                className="border-red-300 text-red-700 hover:bg-red-50"
              >
                <Trash2 className="w-4 h-4 mr-2" />
                Delete
              </Button>
            </div>
          )}
        </div>

        {/* Horse Profile Card */}
        <Card className="bg-white/70 backdrop-blur-sm border-amber-200 mb-8">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Heart className="w-5 h-5 text-amber-600" />
              Horse Profile
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid md:grid-cols-3 gap-6">
              <div className="aspect-square bg-gradient-to-br from-amber-100 to-orange-100 rounded-xl flex items-center justify-center overflow-hidden">
                {horse.photo_url ? (
                  <img 
                    src={horse.photo_url} 
                    alt={horse.name}
                    className="w-full h-full object-cover"
                  />
                ) : (
                  <Heart className="w-24 h-24 text-amber-500" />
                )}
              </div>
              
              <div className="md:col-span-2 space-y-4">
                <div className="grid md:grid-cols-2 gap-4">
                  <div>
                    <h4 className="font-medium text-gray-900 mb-2">Basic Information</h4>
                    <div className="space-y-2 text-sm">
                      <p><span className="text-amber-700 font-medium">Breed:</span> {horse.breed}</p>
                      <p><span className="text-amber-700 font-medium">Age:</span> {horse.age} years</p>
                      <p><span className="text-amber-700 font-medium">Gender:</span> {horse.gender}</p>
                      <p><span className="text-amber-700 font-medium">Color:</span> {horse.color}</p>
                      {horse.height && (
                        <p><span className="text-amber-700 font-medium">Height:</span> {horse.height}</p>
                      )}
                    </div>
                  </div>
                  
                  <div>
                    <h4 className="font-medium text-gray-900 mb-2">Training & Status</h4>
                    <div className="space-y-2 text-sm">
                      {horse.discipline && (
                        <div className="flex items-center gap-2">
                          <Award className="w-4 h-4 text-amber-600" />
                          <span>{horse.discipline}</span>
                        </div>
                      )}
                      {horse.registration_number && (
                        <p><span className="text-amber-700 font-medium">Registration:</span> {horse.registration_number}</p>
                      )}
                      {horse.for_sale && horse.sale_price && (
                        <div className="flex items-center gap-2 text-green-600 font-medium">
                          <DollarSign className="w-4 h-4" />
                          <span>${horse.sale_price.toLocaleString()}</span>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
                
                {horse.notes && (
                  <div>
                    <h4 className="font-medium text-gray-900 mb-2">Notes</h4>
                    <p className="text-gray-700 text-sm">{horse.notes}</p>
                  </div>
                )}
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Tabs for different sections */}
        <Tabs defaultValue="training" className="space-y-6">
          <TabsList className="bg-white/70 backdrop-blur-sm border border-amber-200">
            <TabsTrigger value="training" className="flex items-center gap-2">
              <FileText className="w-4 h-4" />
              Training Logs
            </TabsTrigger>
            <TabsTrigger value="feeding" className="flex items-center gap-2">
              <Utensils className="w-4 h-4" />
              Feeding Schedule
            </TabsTrigger>
            <TabsTrigger value="veterinary" className="flex items-center gap-2">
              <Stethoscope className="w-4 h-4" />
              Veterinary Records
            </TabsTrigger>
            <TabsTrigger value="shoeing" className="flex items-center gap-2">
              <Hammer className="w-4 h-4" />
              Shoeing Records
            </TabsTrigger>
          </TabsList>

          {/* Training Logs Tab */}
          <TabsContent value="training">
            <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle className="flex items-center gap-2">
                    <FileText className="w-5 h-5 text-amber-600" />
                    Training History
                  </CardTitle>
                  <Link to={createPageUrl(`AddTrainingLog?horse_id=${horse.id}`)}>
                    <Button size="sm" className="bg-gradient-to-r from-amber-600 to-orange-600 hover:from-amber-700 hover:to-orange-700">
                      <Plus className="w-4 h-4 mr-2" />
                      Add Session
                    </Button>
                  </Link>
                </div>
              </CardHeader>
              <CardContent>
                {trainingLogs.length === 0 ? (
                  <div className="text-center py-8">
                    <FileText className="w-12 h-12 text-amber-400 mx-auto mb-4" />
                    <p className="text-amber-700 mb-4">No training sessions recorded yet</p>
                    <Link to={createPageUrl(`AddTrainingLog?horse_id=${horse.id}`)}>
                      <Button className="bg-gradient-to-r from-amber-600 to-orange-600 hover:from-amber-700 hover:to-orange-700">
                        Record First Session
                      </Button>
                    </Link>
                  </div>
                ) : (
                  <div className="space-y-4">
                    {trainingLogs.map((log) => (
                      <div key={log.id} className="bg-white rounded-lg border border-amber-100 p-4">
                        <div className="flex items-center justify-between mb-3">
                          <div className="flex items-center gap-3">
                            <h4 className="font-medium text-gray-900">{log.discipline}</h4>
                            <Badge variant="outline" className="text-amber-700 border-amber-300">
                              {format(new Date(log.date), "MMM d, yyyy")}
                            </Badge>
                          </div>
                          {/* Training logs can also have an edit button, though not explicitly requested in the outline */}
                          <div className="flex items-center gap-2">
                            {log.rating && (
                              <div className="flex items-center gap-1">
                                <Star className="w-4 h-4 fill-current text-amber-500" />
                                <span className="text-sm font-medium">{log.rating}/5</span>
                              </div>
                            )}
                            <Link to={createPageUrl(`EditTrainingLog?id=${log.id}`)}>
                              <Button variant="ghost" size="sm" className="text-amber-600 hover:bg-amber-50">
                                <Edit className="w-3 h-3" />
                              </Button>
                            </Link>
                          </div>
                        </div>
                        <p className="text-gray-700 text-sm mb-3">{log.notes}</p>
                        <div className="flex items-center gap-4 text-xs text-amber-700">
                          {log.duration && <span>{log.duration} minutes</span>}
                          {log.weather_conditions && <span>{log.weather_conditions}</span>}
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>

          {/* Feeding Schedule Tab */}
          <TabsContent value="feeding">
            <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle className="flex items-center gap-2">
                    <Utensils className="w-5 h-5 text-amber-600" />
                    Feeding Schedule
                  </CardTitle>
                  <Link to={createPageUrl(`AddFeedingSchedule?horse_id=${horse.id}`)}>
                    <Button size="sm" className="bg-gradient-to-r from-amber-600 to-orange-600 hover:from-amber-700 hover:to-orange-700">
                      <Plus className="w-4 h-4 mr-2" />
                      Add Feeding
                    </Button>
                  </Link>
                </div>
              </CardHeader>
              <CardContent>
                {feedingSchedules.length === 0 ? (
                  <div className="text-center py-8">
                    <Utensils className="w-12 h-12 text-amber-400 mx-auto mb-4" />
                    <p className="text-amber-700 mb-4">No feeding schedule set up yet</p>
                    <Link to={createPageUrl(`AddFeedingSchedule?horse_id=${horse.id}`)}>
                      <Button className="bg-gradient-to-r from-amber-600 to-orange-600 hover:from-amber-700 hover:to-orange-700">
                        Create Feeding Schedule
                      </Button>
                    </Link>
                  </div>
                ) : (
                  <div className="grid md:grid-cols-2 gap-4">
                    {feedingSchedules.map((feeding) => (
                      <div key={feeding.id} className="bg-white rounded-lg border border-amber-100 p-4">
                        <div className="flex items-center justify-between mb-2">
                          <h4 className="font-medium text-gray-900">{feeding.feed_type}</h4>
                          <div className="flex gap-2 items-center"> {/* Added items-center for alignment */}
                            <Badge variant="outline" className="text-amber-700 border-amber-300">
                              {feeding.time_of_day}
                            </Badge>
                            <Link to={createPageUrl(`EditFeedingSchedule?id=${feeding.id}`)}>
                              <Button variant="ghost" size="sm" className="text-amber-600 hover:bg-amber-50">
                                <Edit className="w-3 h-3" />
                              </Button>
                            </Link>
                          </div>
                        </div>
                        <p className="text-gray-700 text-sm mb-2">
                          <span className="font-medium">Amount:</span> {feeding.amount}
                        </p>
                        <p className="text-gray-600 text-xs">
                          {feeding.frequency}
                        </p>
                        {feeding.instructions && (
                          <p className="text-gray-600 text-xs mt-2">{feeding.instructions}</p>
                        )}
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>

          {/* Veterinary Records Tab */}
          <TabsContent value="veterinary">
            <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle className="flex items-center gap-2">
                    <Stethoscope className="w-5 h-5 text-amber-600" />
                    Veterinary Records
                  </CardTitle>
                  <Link to={createPageUrl(`AddVetVisit?horse_id=${horse.id}`)}>
                    <Button size="sm" className="bg-gradient-to-r from-amber-600 to-orange-600 hover:from-amber-700 hover:to-orange-700">
                      <Plus className="w-4 h-4 mr-2" />
                      Add Visit
                    </Button>
                  </Link>
                </div>
              </CardHeader>
              <CardContent>
                {vetVisits.length === 0 ? (
                  <div className="text-center py-8">
                    <Stethoscope className="w-12 h-12 text-amber-400 mx-auto mb-4" />
                    <p className="text-amber-700 mb-4">No veterinary visits recorded yet</p>
                    <Link to={createPageUrl(`AddVetVisit?horse_id=${horse.id}`)}>
                      <Button className="bg-gradient-to-r from-amber-600 to-orange-600 hover:from-amber-700 hover:to-orange-700">
                        Record First Visit
                      </Button>
                    </Link>
                  </div>
                ) : (
                  <div className="space-y-4">
                    {vetVisits.map((visit) => (
                      <div key={visit.id} className="bg-white rounded-lg border border-amber-100 p-4">
                        <div className="flex items-center justify-between mb-3">
                          <div className="flex items-center gap-3">
                            <h4 className="font-medium text-gray-900">{visit.visit_type}</h4>
                            <Badge variant="outline" className="text-amber-700 border-amber-300">
                              {format(new Date(visit.visit_date), "MMM d, yyyy")}
                            </Badge>
                          </div>
                          <div className="flex items-center gap-2">
                            {visit.cost && (
                              <span className="text-sm font-medium text-green-600">
                                ${visit.cost}
                              </span>
                            )}
                            <Link to={createPageUrl(`EditVetVisit?id=${visit.id}`)}>
                              <Button variant="ghost" size="sm" className="text-amber-600 hover:bg-amber-50">
                                <Edit className="w-3 h-3" />
                              </Button>
                            </Link>
                          </div>
                        </div>
                        <p className="text-gray-600 text-sm mb-2">
                          <span className="font-medium">Veterinarian:</span> {visit.vet_name}
                        </p>
                        {visit.diagnosis && (
                          <p className="text-gray-700 text-sm mb-2">{visit.diagnosis}</p>
                        )}
                        {visit.treatment && (
                          <p className="text-gray-600 text-sm">
                            <span className="font-medium">Treatment:</span> {visit.treatment}
                          </p>
                        )}
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>

          {/* Shoeing Records Tab */}
          <TabsContent value="shoeing">
            <Card className="bg-white/70 backdrop-blur-sm border-amber-200">
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle className="flex items-center gap-2">
                    <Hammer className="w-5 h-5 text-amber-600" />
                    Shoeing History
                  </CardTitle>
                  <Link to={createPageUrl(`AddShoeingRecord?horse_id=${horse.id}`)}>
                    <Button size="sm" className="bg-gradient-to-r from-amber-600 to-orange-600 hover:from-amber-700 hover:to-orange-700">
                      <Plus className="w-4 h-4 mr-2" />
                      Add Record
                    </Button>
                  </Link>
                </div>
              </CardHeader>
              <CardContent>
                {shoeingRecords.length === 0 ? (
                  <div className="text-center py-8">
                    <Hammer className="w-12 h-12 text-amber-400 mx-auto mb-4" />
                    <p className="text-amber-700 mb-4">No shoeing records found</p>
                    <Link to={createPageUrl(`AddShoeingRecord?horse_id=${horse.id}`)}>
                      <Button className="bg-gradient-to-r from-amber-600 to-orange-600 hover:from-amber-700 hover:to-orange-700">
                        Record First Shoeing
                      </Button>
                    </Link>
                  </div>
                ) : (
                  <div className="space-y-4">
                    {shoeingRecords.map((record) => (
                      <div key={record.id} className="bg-white rounded-lg border border-amber-100 p-4">
                        <div className="flex items-center justify-between mb-3">
                          <div className="flex items-center gap-3">
                            <h4 className="font-medium text-gray-900">{record.type}</h4>
                            <Badge variant="outline" className="text-amber-700 border-amber-300">
                              {format(new Date(record.shoeing_date), "MMM d, yyyy")}
                            </Badge>
                          </div>
                          <div className="flex items-center gap-2">
                            {record.cost && (
                              <span className="text-sm font-medium text-green-600">
                                ${record.cost}
                              </span>
                            )}
                            <Link to={createPageUrl(`EditShoeingRecord?id=${record.id}`)}>
                              <Button variant="ghost" size="sm" className="text-amber-600 hover:bg-amber-50">
                                <Edit className="w-3 h-3" />
                              </Button>
                            </Link>
                          </div>
                        </div>
                        <p className="text-gray-600 text-sm mb-2">
                          <span className="font-medium">Farrier:</span> {record.farrier_name}
                        </p>
                        {record.notes && (
                          <p className="text-gray-700 text-sm mb-2">{record.notes}</p>
                        )}
                        {record.next_due_date && (
                          <p className="text-gray-600 text-sm">
                            <span className="font-medium">Next Due:</span> {format(new Date(record.next_due_date), "MMM d, yyyy")}
                          </p>
                        )}
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}
